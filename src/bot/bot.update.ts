import { Ctx, Hears, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';

import { actionButtons, leaveChatButton } from './bot.buttons';
import { BotService } from './bot.service';
import { Context } from './context.interface';
import { TicketsService } from '../tickets/tickets.service';

@Update()
export class BotUpdate {
   constructor(
      @InjectBot()
      private readonly bot: Telegraf<Context>,
      private readonly botService: BotService,
      private readonly ticketService: TicketsService,
   ) {}

   @Hears('üìù –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
   async helpDocs(ctx: Context) {
      const text1 = `üìÅ`
      const text2 = `–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://www.google.com/\n–¢–∞–∫–∂–µ, –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://www.youtube.com/`
      await ctx.reply(text1)
      await ctx.reply(text2)
      ctx.session.path = 'docs'
   }

   @Hears('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
   async support(ctx: Context) {
      if((ctx.session.ticketStatus === 'waitQuestion') || !ctx.session.ticketStatus) {
         await this.leaveChatKeyboard(ctx, 'üí¨')
         const text = `–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n–í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.`
         await this.leaveChatKeyboard(ctx, text)
         ctx.session.ticketStatus = 'waitQuestion'
      }
      if(ctx.session.ticketStatus === 'create') {
         const text = '–ß–∞—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.'
         await this.leaveChatKeyboard(ctx, 'üí¨')
         await this.leaveChatKeyboard(ctx, text)
      }
      ctx.session.path = 'tickets';
   }

   @Hears('üëà –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç')
   async —É—á—à–µ(ctx: Context) {
      await this.defaultMenuKeyboard(ctx);
      ctx.session.path = 'home';
   }

   @On('text')
   async getMessage(@Message('text') text: string, @Ctx() ctx: Context) {
      const message = ctx.update['message']
      console.log('message.sender_chat', message, '\n----------')
      // message.sender_chat - –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
      if(message.sender_chat) {
         if(message.chat.type === 'supergroup') { // –ï—Å–ª–∏ —á–∞—Ç - —ç—Ç–æ –≥—Ä—É–ø–ø–∞
            // –ë–µ—Ä—ë–º –ø–æ–ª–µ thread, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –æ—Ç –∫–æ–≥–æ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–æ–º, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            if(message?.forward_from?.id) {
               const openedTicket = await this.ticketService.updateTicketData({
                  senderId: message.forward_from.id, ticketChatId: message.message_id
               })
               console.log(openedTicket)
            }
            return
         }
      }
      // message_thread_id - –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ
      if(message.message_thread_id) {
         this.botService.checkReplyTicket(ctx, this.bot)
         return
      }
      if((ctx.session.path === 'home') || !ctx.session.path) {
         await this.defaultMenuKeyboard(ctx);
         return
      }
      if(ctx.session.path === 'docs') {
         const text = '–ù–µ –Ω–∞—à–ª–∏ —á—Ç–æ –∏—Å–∫–∞–ª–∏?\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º!'
         await this.mainMenuKeyboard(ctx, text);
         return
      }

      if(ctx.session.path === 'tickets') {
         await this.botService.createUpdateTicket(ctx, this.bot)
         if(!ctx.session.ticketStatus || (ctx.session.ticketStatus === 'waitQuestion')) {
            const text = '–ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫ —á–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞'
            ctx.session.ticketStatus = 'create'
         }
         // await this.leaveChatKeyboard(ctx, text)
      }
   }

   @Start()
   async startCommand(ctx: Context) {
      ctx.session.path = 'home'
      await ctx.reply('ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ –Ω–∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ  "–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã".\n–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.', actionButtons())
      return
   }

   // –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ / —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É
   @On('my_chat_member')
   async my_chat_member(@Ctx() ctx: Context) {
      this.botService.checkChannelStatus(ctx, this.bot)
   }

   async defaultMenuKeyboard(ctx) {
      return ctx.reply('ü§ñ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', actionButtons());
   }
   async mainMenuKeyboard(ctx, text) {
      return ctx.reply(text, actionButtons());
   }
   leaveChatKeyboard(ctx, text) {
      return ctx.reply(text, leaveChatButton());
   }
}



// @On('chat_member')
// async chat_member(@Ctx() ctx: Context) {
//    const botId = ctx.botInfo.id
//    console.log(botId)
//    console.log('chat_member')
// }

   // @On('channel_post')
   // async mssage(@Ctx() ctx: Context) {
   //    console.log(ctx)
   // }
   // @On('callback_query')
   // async callback_query(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('callback_query')
   // }
   // @On('channel_chat_created')
   // async channel_chat_created(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('channel_chat_created')
   // }
   // @On('migrate_from_chat_id')
   // async migrate_from_chat_id(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('migrate_from_chat_id')
   // }
   // @On('migrate_to_chat_id')
   // async migrate_to_chat_id(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('migrate_to_chat_id')
   // }
   // @On('new_chat_members')
   // async new_chat_members(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('new_chat_members')
   // }
   // @On('supergroup_chat_created')
   // async supergroup_chat_created(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('supergroup_chat_created')
   // }
   // @On('group_chat_created')
   // async group_chat_created(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('group_chat_created')
   // }
   // @On('invoice')
   // async invoice(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('invoice')
   // }
   // @On('left_chat_member')
   // async left_chat_member(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('left_chat_member')
   // }
   // @On('chosen_inline_result')
   // async chosen_inline_result(@Ctx() ctx: Context) {
   //    console.log(ctx)
   //    console.log('chosen_inline_result')
   // }
   // @On('text')
   // async getMessage22(@Message('text') text: string, @Ctx() ctx: Context) {
      // await ctx.reply('ü§ñ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? ', actionButtons());
      // console.log(text)
      // console.log(ctx)
      // console.log(ctx.session.type)
      // if (!ctx.session.type) return;
//
//     if (ctx.session.type === 'create') {
//       const tasks = await this.appService.createTask(message);
//       await ctx.reply(showList(tasks));
//     }
//
//     if (ctx.session.type === 'done') {
//       const tasks = await this.appService.doneTask(Number(message));
//       if (!tasks) {
//         await ctx.reply('–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å üòï');
//         return;
//       }
//       await ctx.reply(showList(tasks));
//     }
//
//     if (ctx.session.type === 'delete') {
//       const tasks = await this.appService.deleteTask(Number(message));
//       if (!tasks) {
//         await ctx.reply('–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å üòï');
//         return;
//       }
//       await ctx.reply(showList(tasks));
//     }
   // }