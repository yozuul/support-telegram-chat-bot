import { Ctx, Hears, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';

import { actionButtons, leaveChatButton } from './bot.buttons';
import { BotService } from './bot.service';
import { Context } from './context.interface';
import { TicketsService } from '../tickets/tickets.service';

@Update()
export class BotUpdate {
   constructor(
      @InjectBot()
      private readonly bot: Telegraf<Context>,
      private readonly botService: BotService,
      private readonly ticketService: TicketsService,
   ) {}

   @Start()
   async startCommand(ctx: Context) {
      ctx.session.path = 'home'
      await ctx.reply('ü§ñ', actionButtons())
      await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑ –Ω–∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ  "–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã".\n–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.', actionButtons())
      return
   }
   // –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ / —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É
   @On('my_chat_member')
   async my_chat_member(@Ctx() ctx: Context) {
      console.log(ctx.update['my_chat_member'])
      this.botService.checkChannelStatus(ctx, this.bot)
   }

   @Hears('üìù –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
   async helpDocs(ctx: Context) {
      ctx.session.path = 'docs'
      const text = `–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://www.google.com/\n–¢–∞–∫–∂–µ, –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://www.youtube.com/`
      await ctx.reply(`üìÅ`)
      await ctx.reply(text)
   }

   @Hears('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
   async support(ctx: Context) {
      ctx.session.path = 'tickets';
      if((ctx.session.ticketStatus === 'waitQuestion') || !ctx.session.ticketStatus) {
         await this.leaveChatKeyboard(ctx, 'üí¨')
         const text = `–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n–í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.`
         await this.leaveChatKeyboard(ctx, text)
         ctx.session.ticketStatus = 'waitQuestion'
      }
      if(ctx.session.ticketStatus === 'create') {
         const text = '–ß–∞—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.'
         await this.leaveChatKeyboard(ctx, 'üí¨')
         await this.leaveChatKeyboard(ctx, text)
      }
   }

   @Hears('üëà –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç')
   async —É—á—à–µ(ctx: Context) {
      ctx.session.path = 'home';
      await this.defaultMenuKeyboard(ctx);
   }

   @On('message')
   async testMessage(@Message('text') text: string, @Ctx() ctx: Context) {
      const message = ctx.update['message']
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö (–æ–ø–µ—Ä–∞—Ç–æ—Ä), –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ—Ç—É
      if(message.message_thread_id) {
         await this.threadMessage(ctx, message, text)
      } else {
         await this.botMessage(ctx, message, text)
      }
   }

   async threadMessage(ctx, message, text) {
      // console.log('threadMessage MESSAGE', message)
      // console.log('threadMessage text', text)
      console.log('—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö')
      const threadId = message.message_thread_id
      const ticketExist = await this.ticketService.findByThreadId(threadId)
      if(ticketExist && !ticketExist.closed && ticketExist.ticketChatId === threadId.toString()) {
         console.log(ticketExist.senderId)
         await this.sendMessage(ticketExist.senderId, message, false)
      }
   }

   async botMessage(ctx, message, text) {
      console.log('botMessage MESSAGE', message)
      console.log('botMessage text', text)
      console.log('—Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É')
      if(message.sender_chat?.type === 'channel') {
         if(message.forward_from?.id) {
            await this.ticketService.updateTicketData(message.forward_from?.id, message.message_id)
         }
      }
      if(ctx.session.path === 'home') {
         await this.defaultMenuKeyboard(ctx);
      }
      if(ctx.session.path === 'docs') {
         const text = '–ù–µ –Ω–∞—à–ª–∏ —á—Ç–æ –∏—Å–∫–∞–ª–∏?\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–º!'
         await this.mainMenuKeyboard(ctx, text);
      }

      if(ctx.session.path === 'tickets') {
         const openTicket = await this.botService.checkOpenedTicket(message, this.bot)
         if(openTicket) {
            const { chatId } = await this.ticketService.getGroupId()
            try {
               await this.sendMessage(chatId, message, openTicket.ticketChatId)
            } catch (error) {
               if(error.message === 'reply_not_found') {
                  await this.ticketService.deleteByThread(openTicket.ticketChatId)
                  this.botMessage(ctx, message, text)
               }
            }
         }
         if(!ctx.session.ticketStatus || (ctx.session.ticketStatus === 'waitQuestion')) {
            const text = '–ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫ —á–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞'
            await this.leaveChatKeyboard(ctx, text)
            ctx.session.ticketStatus = 'create'
         }
      }
   }

   async sendMessage(recipient, message, reply) {
      if(message.document) {
         try {
            await this.bot.telegram.sendDocument(recipient, message.document.file_id, {
               caption: message.caption || '–í–ª–æ–∂–µ–Ω–∏–µ',
               reply_to_message_id: reply ? reply : '',
            })
         } catch (error) {
            console.log(error, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', {
               recipient, message, reply
            })
            // –ï—Å–ª–∏ —Ç–∏–∫–∫–µ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω —Å –∫–∞–Ω–∞–ª–∞, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç—É–¥–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±—Ä–æ—Å–∞–µ–º –µ—â—ë –æ–¥–Ω—É –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–∫–µ—Ç
            if(error.description.includes('replied message not found')) {
               throw new Error('reply_not_found')
            }
         }
      }
      if(!message.document) {
         try {
            await this.bot.telegram.sendMessage(recipient, message.text || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
               reply_to_message_id: reply ? reply : '',
            })
         } catch (error) {
            console.log(error, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', {
               recipient, message, reply
            })
            if(error.description.includes('replied message not found')) {
               throw new Error('reply_not_found')
            }
         }
      }
   }

   async defaultMenuKeyboard(ctx) {
      return ctx.reply('ü§ñ –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', actionButtons());
   }
   async mainMenuKeyboard(ctx, text) {
      return ctx.reply(text, actionButtons());
   }
   leaveChatKeyboard(ctx, text) {
      return ctx.reply(text, leaveChatButton());
   }
}